openapi: 3.0.1
info:
  description: "This is the API clients would interact with to retrieve content and to submit content into the cloud storage"
  title: CaaS Delivery API
  contact:
    email: team@mayo.edu
  version: "1.0.0"
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/GUEVARAAARON/caas-delivery-api/1.0.0
  - url: https://mayo.swagger.io/api/v3
tags:
  - name: Content Type
    description: Type of content 
    externalDocs:
      description: Find out more
      url: http://wiki.mayo.edu/developer
  - name: Asset
    description: document content requested
    externalDocs:
      description: Find out more information
      url: http://wiki.mayo.edu/developer
paths:
  /upload:
    post:
      summary: Upload a file with a DID
      description: This endpoint allows for uploading a file along with its associated DID.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                DID:
                  type: string
                  description: Digital Identifier for the user.
                file-stream:
                  type: string
                  format: binary
                  description: The file stream to upload.
              required:
                - DID
                - file-stream
        required: true
      responses:
        '200':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  DID:
                    type: string
        '400':
          description: Invalid input
        '500':
          description: Unexpected error
  /download:
    get:
      summary: Download file by DID and file format
      description: This endpoint allows for downloading a file associated with a given DID in the specified format.
      parameters:
        - in: query
          name: DID
          schema:
            type: string
          required: true
          description: The Digital Identifier to look up.
        - in: query
          name: format
          schema:
            type: string
            enum:
              - XML
              - JSON
          required: true
          description: The format of the file to download.
      responses:
        '200':
          description: Successfully downloaded the file
          content:
            application/xml:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid parameters provided
        '404':
          description: DID not found or format not supported
        '500':
          description: Unexpected error
  /asset/{id}:
    get:
      tags:
        - Asset
      summary: Finds Asset by id
      description: Returns the JSON or XML content for that Id value. 
      operationId: findAssetById
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the content
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Asset"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Asset"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "501":
          description: Not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - OAuth2:
            - read
  /asset/{id}/version/{versionTag}:
    head:
      tags:
        - Asset
      summary: Checks for the existence of a Content item 
      operationId: hasContentItem
      description: |
        Determines whether the given ID matches a registered Content item.
        
        Versioning: succeeds if any (at least one) version is registered, based on the Id and version tag
        Resolves the ID to a specific version (by tag)
      parameters:
        - name: id
          in: path
          description: ID of Asset to return
          required: true
          schema:
            type: string
        - name: versionTag
          in: path
          description: version tag of asset
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Asset"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Asset"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "501":
          description: Not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - OAuth2:
            - read
    get:
      tags:
        - Asset
      summary: Find content by ID and version tag
      description: Returns a single content document 
      operationId: getContentbyVersionTag
      parameters:
        - name: id
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: string
        - name: versionTag
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Asset"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Asset"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "501":
          description: Not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - OAuth2:
            - read
  /asset/{collectionId} :
    head:
      tags:
        - Asset
      summary: Checks for the existence of a Content item 
      operationId: hasContentItembyCollectionId
      description: |
        Determines whether the given ID matches a registered Content item.
        
        Versioning: succeeds if any (at least one) version is registered, based on the Id and version tag
        Resolves the ID to a specific version (by tag)
      parameters:
        - name: collectionId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Asset"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Asset"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "501":
          description: Not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - OAuth2:
            - read
    get:
      tags:
        - Asset
      summary: Find content by collection ID 
      description: Returns a single content document 
      operationId: getContentItembyCollectionId
      parameters:
        - name: collectionId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Asset"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Asset"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "501":
          description: Not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - OAuth2:
            - read
components:
  schemas:
    Asset:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        version:
          $ref: "#/components/schemas/Version"
        name:
          type: string
          example: content A
        metadata:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: "#/components/schemas/Metadata"
        status:
          type: string
          description: pet status in the store
          enum:
            - active
            - inactive
      xml:
        name: Asset
    Version:
      type: object
      properties:
        id:
          type: integer
          format: int64
        versionName:
          type: string
      xml:
        name: Version
    Metadata:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: //to-do
      xml:
        name: Metadata
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          scopes:
            read: Query the registry
          authorizationUrl: "https://to/do"
          tokenUrl: "https://to/do"